//
//  main.cpp
//  SICP-Interval2
//
//  Created by Paul Sholtz on 11/21/11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#include <iostream>

#include <boost/numeric/interval.hpp>

using namespace std;
using namespace boost::numeric;

// procedure declarations
void display(interval<float> p);

// procedure definitions 
void display(interval<float> p) {
    cout << "(" << p.lower() << "," << p.upper() << ")" << endl;
}

/********************************************************************************* 
 * We're not re-implementing the multiplication procedure here, but rather
 * just checking that we can the same answers using the multiplication procedure
 * as we did when using Scheme.
 *
 * The output generated by this program is the folow, which corresponds with the 
 * results obtained from the reference Scheme implementation:
 *
 
 Case I Tests:
 -------------
 (3,4)
 (5,6)
 (15,24)
 
 Case II Tests:
 --------------
 (-10,-8)
 (-4,-3)
 (24,40)
 
 Case III Tests:
 ---------------
 (-40,-24)
 (-16,-9)
 (-60,-40)
 (-24,-15)
 
 Case IV Tests:
 --------------
 (-40,-24)
 (-60,-40)
 (-16,-9)
 (-24,-15)
 
 Case V Tests:
 -------------
 (-8,20)
 (-12,30)
 
 Case VI Tests:
 --------------
 (-50,20)
 (-20,8)
 
 Case VII Tests:
 ---------------
 (-8,20)
 (-12,30)
 
 Case VIII Tests:
 ----------------
 (-50,20)
 (-20,8)
 
 Case IX Tests:
 --------------
 (-10,25)
 (-9,9)
 (-15,15)
 (-15,15)
 
 (0,16)
 (0,24)
 (-40,-0)
 (-16,-0)
 (-8,20)
 (-12,12)
 
 (-8,0)
 (-12,0)
 (-0,20)
 (-0,8)
 (-10,4)
 (-6,6)
 
 (0,16)
 (0,24)
 (-40,-0)
 (-16,-0)
 (-8,20)
 (-12,12)
 
 (-8,0)
 (-12,0)
 (-0,20)
 (-0,8)
 (-10,4)
 (-6,6)
 
 ********************************************************************************/
int main (int argc, const char * argv[])
{
    // CASE I TESTS 
    interval<float> p1(3.0f,4.0f);
    interval<float> p2(5.0f,6.0f);
    
    cout << "Case I Tests:" << endl;
    cout << "-------------" << endl; 
    display(p1); 
    display(p2); 
    display(p1*p2);
    cout << endl;
    
    // CASE II TESTS
    interval<float> q1(-10.0f, -8.0f);
    interval<float> q2(-4.0f, -3.0f);
    cout << "Case II Tests:" << endl;
    cout << "--------------" << endl; 
    display(q1);
    display(q2);
    display(q1*q2);
    cout << endl; 
    
    // CASE III TESTS
    cout << "Case III Tests:" << endl;
    cout << "---------------" << endl; 
    display(p1*q1);
    display(p1*q2);
    display(p2*q1);
    display(p2*q2);
    cout << endl; 
    
    // CASE IV TESTS
    cout << "Case IV Tests:" << endl;
    cout << "--------------" << endl;
    display(q1*p1);
    display(q1*p2);
    display(q2*p1);
    display(q2*p2);
    cout << endl; 
    
    // CASE V TESTS
    interval<float> r1(-2.0f, 5.0f);
    cout << "Case V Tests:" << endl;
    cout << "-------------" << endl; 
    display(r1*p1);
    display(r1*p2);
    cout << endl;
    
    // CASE VI TESTS
    cout << "Case VI Tests:" << endl;
    cout << "--------------" << endl;
    display(r1*q1);
    display(r1*q2);
    cout << endl;
    
    // CASE VII TESTS
    cout << "Case VII Tests:" << endl;
    cout << "---------------" << endl;
    display(p1*r1);
    display(p2*r1);
    cout << endl;
    
    // CASE VIII TESTS
    cout << "Case VIII Tests:" << endl;
    cout << "----------------" << endl;
    display(q1*r1);
    display(q2*r1); 
    cout << endl;
    
    // CASE IX TESTS
    interval<float> r2(-3.0f, 3.0f);
    interval<float> s1(0.0f, 4.0f);
    interval<float> s2(-2.0f, 0.0f); 
    cout << "Case IX Tests:" << endl;
    cout << "--------------" << endl;
    display(r1*r1);
    display(r2*r2);
    display(r1*r2);
    display(r2*r1);
    cout << endl;
    
    display(s1*p1);
    display(s1*p2);
    display(s1*q1);
    display(s1*q2);
    display(s1*r1);
    display(s1*r2);
    cout << endl;
    
    display(s2*p1);
    display(s2*p2);
    display(s2*q1);
    display(s2*q2);
    display(s2*r1);
    display(s2*r2);
    cout << endl;
    
    display(p1*s1);
    display(p2*s1);
    display(q1*s1);
    display(q2*s1);
    display(r1*s1);
    display(r2*s1);
    cout << endl; 
    
    display(p1*s2);
    display(p2*s2);
    display(q1*s2);
    display(q2*s2);
    display(r1*s2);
    display(r2*s2);
    cout << endl;
    
    return 0;
}

