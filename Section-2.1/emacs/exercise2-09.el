;;
;; Exercise 2.9
;;
;; The "width" of an interval is half of the difference between its upper and lower bounds.
;; The width is a measure of the uncertainty of the number specified by the interval. For 
;; some arithmetic operations the width of the result of combining two interval is a
;; function only of the widths of the argument intervals, whereas for others the width 
;; of the combination is not a function of the widths of the argument intervals. Show that the 
;; width of the sum (or difference) of two intervals is a function only of the widths of the 
;; intervals being added (or subtracted). Give examples to show that this is not true for
;; multiplication or division.
;;

;;
;; Define the "width" procedure:
;;
(defun width (p) (/ (- (upper-bound p) (lower-bound p)) 2.0))

;;
;; Define supporting procedures:
;;
(defun make-interval (a b) (cons a b))
(defun lower-bound (x) (car x))
(defun upper-bound (x) (cdr x))

(defun mul-interval (x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
	(p2 (* (lower-bound x) (upper-bound y)))
	(p3 (* (upper-bound x) (lower-bound y)))
	(p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
		   (max p1 p2 p3 p4))))

(defun div-interval (x y)
  (mul-interval x 
		(make-interval (/ 1.0 (upper-bound y))
			       (/ 1.0 (lower-bound y)))))

;;
;; The proof that the width of the sum (or difference) of two intervals is a function 
;; of the width of the argument intervals is given in the attached .md file.
;;

;;
;; For a counter-example that this is not the case for multiplication or division, 
;; consider the following examples:
;;
(setq i1 (make-interval 1 2))
(setq i2 (make-interval 3 4))
(setq i3 (make-interval 5 6))

;;
;; All these intervals have the same width:
;;
(width i1)
;; ==> 0.5
(width i2)
;; ==> 0.5
(width i3)
;; ==> 0.5

;;
;; However, the products generated by multiplying these intervals together have differing widths:
;;
(width (mul-interval i1 i2))
;; ==> 2.5
(width (mul-interval i2 i3))
;; ==> 4.5
(width (mul-interval i1 i3))
;; ==> 3.5

;;
;; Indeed, even the width of the "squares" of the intervals varies, despite the fact that the 
;; intervals have constant width:
;;
(width (mul-interval i1 i1))
;; ==> 1.5
(width (mul-interval i2 i2))
;; ==> 3.5
(width (mul-interval i3 i3))
;; ==> 5.5 

;;
;; Similar results are obtained when using the "divide interval" procedure:
;;
(width (div-interval i1 i2))
;; ==> 0.20833333
(width (div-interval i2 i1))
;; ==> 1.25

(width (div-interval i1 i3))
;; ==> 0.1166666666
(width (div-interval i3 i1))
;; ==> 1.75

(width (div-interval i2 i3))
;; ==> 0.15
(width (div-interval i3 i2))
;; ==> 0.375

(width (div-interval i1 i1))
;; ==> 0.75
(width (div-interval i2 i2))
;; ==> 0.2916666
(width (div-interval i3 i3))
;; ==> 0.1833333

;;
;; Further analytic arguments regarding the multiplication or division are given in the 
;; attached .md file.
;;