;;
;; Exercise 1
;;

;;
;; Consider the following definitions:
;;
(define (our-display x)
  (display x)
  x)

(define (count1 x)
  (cond ((= x 0) 0)
	(else
	 (our-display x)
	 (count1 (- x 1)))))

(define (count2 x)
  (cond ((= x 0) 0)
	(else
	 (count2 (- x 1))
	 (our-display x))))

;;
;; What will "(count1 4)" and "(count2 4)" display?
;;

;;
;; These two procedures differ in where they apply the display to console, versus
;; where they apply the recursion.
;;
;; It is useful to work out the call graph for each invocation.
;;
;; Let's start with the call "(count1 4)":
;;
------------------ 
(count1 4)
------------------
(our-display 4)
(count1 3)
------------------ 
(our-display 4)
(our-display 3)
(count1 2)
------------------ 
(our-display 4)
(our-display 3)
(our-display 2)
(count1 1)
------------------ 
(our-display 4)
(our-display 3)
(our-display 2)
(our-display 1)
(count1 0)
------------------- 
(our-display 4)
(our-display 3)
(our-display 2)
(our-display 1)
-------------------
4321
------------------- 

